// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// Photomatons
// ============================================
model Photomaton {
  id                Int      @id @default(autoincrement())
  name              String
  hostname          String   @unique
  tailscaleIp       String   @map("tailscale_ip")
  routerTailscaleIp String?  @map("router_tailscale_ip")

  // État connexion
  routerConnected Boolean   @default(false) @map("router_connected")
  pcConnected     Boolean   @default(false) @map("pc_connected")
  lastSeen        DateTime? @map("last_seen")

  // Gestion papier
  remainingPrints   Int      @default(700) @map("remaining_prints")
  warningThreshold  Int      @default(350) @map("warning_threshold")
  criticalThreshold Int      @default(275) @map("critical_threshold")
  lastPrintUpdate   DateTime? @map("last_print_update")

  // Relations
  events     Event[]
  speedTests SpeedTest[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("photomatons")
}

// ============================================
// Événements (synchronisés depuis Notion)
// ============================================
model Event {
  id           Int        @id @default(autoincrement())
  notionPageId String     @unique @map("notion_page_id")
  photomatonId Int        @map("photomaton_id")
  photomaton   Photomaton @relation(fields: [photomatonId], references: [id])

  // Données Notion
  clientName String  @map("client_name")
  eventType  String? @map("event_type")
  eventDate  DateTime? @map("event_date")
  albumName  String? @map("album_name")
  notionData Json    @map("notion_data") // Snapshot complet Notion

  // Statistiques
  totalSessions Int @default(0) @map("total_sessions")
  totalDigital  Int @default(0) @map("total_digital")
  totalPrints   Int @default(0) @map("total_prints")
  totalGifs     Int @default(0) @map("total_gifs")

  // Relations
  photos Photo[]

  // État
  status   EventStatus @default(ACTIVE)
  syncedAt DateTime    @default(now()) @map("synced_at")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@index([photomatonId])
  @@index([status])
  @@index([eventDate])
  @@map("events")
}

enum EventStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

// ============================================
// Photos/Médias
// ============================================
model Photo {
  id        Int       @id @default(autoincrement())
  eventId   Int       @map("event_id")
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  mediaType MediaType @map("media_type")
  timestamp DateTime  @default(now())

  // Métadonnées optionnelles (future)
  metadata Json?

  @@index([eventId, timestamp])
  @@map("photos")
}

enum MediaType {
  PHOTO
  DIGITAL
  PRINT
  GIF
}

// ============================================
// Tests de vitesse réseau
// ============================================
model SpeedTest {
  id            Int        @id @default(autoincrement())
  photomatonId  Int        @map("photomaton_id")
  photomaton    Photomaton @relation(fields: [photomatonId], references: [id])

  downloadSpeed Float      @map("download_speed")
  uploadSpeed   Float      @map("upload_speed")
  ping          Float

  createdAt     DateTime   @default(now()) @map("created_at")

  @@index([photomatonId, createdAt])
  @@map("speedtests")
}

// ============================================
// Utilisateurs (Phase 2 - OAuth Infomaniak)
// ============================================
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?

  // OAuth Infomaniak (Phase 2)
  infomaniakId String? @unique @map("infomaniak_id")

  // Rôles
  role UserRole @default(VIEWER)

  // Session management (NextAuth)
  sessions Session[]
  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  ADMIN
  INSTALLER
  VIEWER
}

// ============================================
// NextAuth Models (pour OAuth Phase 2)
// ============================================
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// Settings (configuration de l'application)
// ============================================
model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String   @db.Text
  description String?
  encrypted   Boolean  @default(false)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

// ============================================
// Audit Logs (traçabilité)
// ============================================
model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  resource   String
  resourceId Int?     @map("resource_id")
  details    Json?
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}
